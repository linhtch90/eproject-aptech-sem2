/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.softech.bookstoremanagement.gui;

import com.softech.bookstoremanagement.database.dao.BooksDao;
import com.softech.bookstoremanagement.database.dao.ReceiptItemsDao;
import com.softech.bookstoremanagement.database.dao.ReceiptsDao;
import com.softech.bookstoremanagement.database.dao.UsersDao;
import com.softech.bookstoremanagement.database.models.Books;
import com.softech.bookstoremanagement.database.models.ReceiptItems;
import com.softech.bookstoremanagement.database.models.Receipts;
import com.softech.bookstoremanagement.database.models.Users;
import com.softech.bookstoremanagement.database.utils.DatabaseUtils;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author Linh
 */
public class CashierGenerateReceipt extends javax.swing.JPanel {

    private List<Books> books = new ArrayList<>();
    private List<Books> bookItems = new ArrayList<>();
    private List<ReceiptItems> receiptItems = new ArrayList<>();
//    private Books currentBookItem = new Books();
//    private ReceiptItems currentReceiptItem = new ReceiptItems();
//    private Receipts currentReceipt = new Receipts();

    private DefaultTableModel model;
    private int selectedRow = 0;

    private String receiptId;
    
    /*
    Application language settings
    */
    private String bundlePath = "com.softech.bookstoremanagement.gui.Bundle";
    private String languageConfigFilePath = "language.properties";

//    private String[] columnTitles = new String[]{" BookId ", " Title", "Author", " Publisher ", " Price"};
//
//    private void table() {
//        model = new DefaultTableModel();
//        model.setColumnIdentifiers(columnTitles);
//
//        books.forEach(item -> {
//            model.addRow(new Object[]{item.getBookId(), item.getAuthors(), item.getTitle(),
//                item.getPublisher(), item.getPrice()});
//        });
//        tblListBookOnReceipt.setModel(model);
//
//    }
    /**
     * Creates new form CashierGenerateReceipt
     */
    public CashierGenerateReceipt() {

        initComponents();

        /*
        Set value for radio box below search text field
         */
        radSearchBookId.setActionCommand("BookId");
        radSearchTitle.setActionCommand("Title");
        radSearchAuthor.setActionCommand("Author");
        radSearchPublisher.setActionCommand("Publisher");
        /*
        Right alignmnet for numeric columns in data tables
         */
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        tblListBookOnReceipt.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);

        tblReceiptInfo.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        tblReceiptInfo.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        tblReceiptInfo.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        
        listAllBooks();
        
        this.setLanguage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radGroupSearch = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBookIdReceipt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnAddToReceipt = new javax.swing.JButton();
        btnUpdateReceiptItem = new javax.swing.JButton();
        btnDeleteReceiptItem = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReceiptInfo = new javax.swing.JTable();
        btnClean = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        btnExportReceipt = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtInputSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        radSearchBookId = new javax.swing.JRadioButton();
        radSearchTitle = new javax.swing.JRadioButton();
        radSearchAuthor = new javax.swing.JRadioButton();
        radSearchPublisher = new javax.swing.JRadioButton();
        btnListAllBooks = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblListBookOnReceipt = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setBorder(new EmptyBorder(5, 5, 5, 5));
        setPreferredSize(new java.awt.Dimension(1000, 590));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/softech/bookstoremanagement/gui/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CashierGenerateReceipt.jPanel1.border.title"))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 590));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText(bundle.getString("CashierGenerateReceipt.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText(bundle.getString("CashierGenerateReceipt.jLabel2.text")); // NOI18N

        btnAddToReceipt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddToReceipt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-plus-+-18.png"))); // NOI18N
        btnAddToReceipt.setText(bundle.getString("CashierGenerateReceipt.btnAddToReceipt.text")); // NOI18N
        btnAddToReceipt.setPreferredSize(new java.awt.Dimension(80, 21));
        btnAddToReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToReceiptActionPerformed(evt);
            }
        });

        btnUpdateReceiptItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdateReceiptItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-map-editing-18.png"))); // NOI18N
        btnUpdateReceiptItem.setText(bundle.getString("CashierGenerateReceipt.btnUpdateReceiptItem.text")); // NOI18N
        btnUpdateReceiptItem.setPreferredSize(new java.awt.Dimension(80, 21));
        btnUpdateReceiptItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReceiptItemActionPerformed(evt);
            }
        });

        btnDeleteReceiptItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDeleteReceiptItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-delete-bin-18.png"))); // NOI18N
        btnDeleteReceiptItem.setText(bundle.getString("CashierGenerateReceipt.btnDeleteReceiptItem.text")); // NOI18N
        btnDeleteReceiptItem.setPreferredSize(new java.awt.Dimension(80, 21));
        btnDeleteReceiptItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReceiptItemActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText(bundle.getString("CashierGenerateReceipt.jLabel3.text")); // NOI18N

        tblReceiptInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Title", "Quantity", "$/volume", "Price ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblReceiptInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReceiptInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReceiptInfo);

        btnClean.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnClean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-brush-18.png"))); // NOI18N
        btnClean.setText(bundle.getString("CashierGenerateReceipt.btnClean.text")); // NOI18N
        btnClean.setPreferredSize(new java.awt.Dimension(80, 23));
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        btnExportReceipt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExportReceipt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-export-pdf-18.png"))); // NOI18N
        btnExportReceipt.setText(bundle.getString("CashierGenerateReceipt.btnExportReceipt.text")); // NOI18N
        btnExportReceipt.setPreferredSize(new java.awt.Dimension(120, 21));
        btnExportReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportReceiptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBookIdReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAddToReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateReceiptItem, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteReceiptItem, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(btnExportReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBookIdReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateReceiptItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteReceiptItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(btnExportReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CashierGenerateReceipt.jPanel2.border.title"))); // NOI18N
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setPreferredSize(new java.awt.Dimension(488, 130));

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-search-18 (2).png"))); // NOI18N
        btnSearch.setText(bundle.getString("CashierGenerateReceipt.btnSearch.text")); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText(bundle.getString("CashierGenerateReceipt.jLabel4.text")); // NOI18N

        radGroupSearch.add(radSearchBookId);
        radSearchBookId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchBookId.setText(bundle.getString("CashierGenerateReceipt.radSearchBookId.text")); // NOI18N
        radSearchBookId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSearchBookIdActionPerformed(evt);
            }
        });

        radGroupSearch.add(radSearchTitle);
        radSearchTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchTitle.setText(bundle.getString("CashierGenerateReceipt.radSearchTitle.text")); // NOI18N
        radSearchTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSearchTitleActionPerformed(evt);
            }
        });

        radGroupSearch.add(radSearchAuthor);
        radSearchAuthor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchAuthor.setText(bundle.getString("CashierGenerateReceipt.radSearchAuthor.text")); // NOI18N

        radGroupSearch.add(radSearchPublisher);
        radSearchPublisher.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchPublisher.setText(bundle.getString("CashierGenerateReceipt.radSearchPublisher.text")); // NOI18N

        btnListAllBooks.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnListAllBooks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-to-do-list-18.png"))); // NOI18N
        btnListAllBooks.setText(bundle.getString("CashierGenerateReceipt.btnListAllBooks.text")); // NOI18N
        btnListAllBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllBooksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(btnListAllBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(radSearchBookId)
                                .addGap(14, 14, 14)
                                .addComponent(radSearchTitle)
                                .addGap(18, 18, 18)
                                .addComponent(radSearchAuthor)
                                .addGap(18, 18, 18)
                                .addComponent(radSearchPublisher))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtInputSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch)))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInputSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(radSearchBookId)
                    .addComponent(radSearchTitle)
                    .addComponent(radSearchAuthor)
                    .addComponent(radSearchPublisher))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(btnListAllBooks)
                .addContainerGap())
        );

        jPanel2.add(jPanel3);

        tblListBookOnReceipt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Title", "Author", "Publisher", "Price ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListBookOnReceipt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListBookOnReceiptMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblListBookOnReceipt);
        if (tblListBookOnReceipt.getColumnModel().getColumnCount() > 0) {
            tblListBookOnReceipt.getColumnModel().getColumn(0).setMinWidth(50);
            tblListBookOnReceipt.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblListBookOnReceipt.getColumnModel().getColumn(0).setMaxWidth(50);
            tblListBookOnReceipt.getColumnModel().getColumn(1).setMinWidth(250);
            tblListBookOnReceipt.getColumnModel().getColumn(1).setPreferredWidth(250);
            tblListBookOnReceipt.getColumnModel().getColumn(1).setMaxWidth(250);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap())
        );

        jPanel2.add(jPanel4);

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void reloadBookItems() {
        DefaultTableModel tableModel = (DefaultTableModel) tblReceiptInfo.getModel();
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
        if (receiptItems.size() > 0) {
            for (int i = 0; i < receiptItems.size(); i++) {
                tableModel.addRow(new Object[]{bookItems.get(i).getBookId(), bookItems.get(i).getTitle(), receiptItems.get(i).getQuantity(), bookItems.get(i).getPrice(), receiptItems.get(i).getItemTotalPrice()});
            }
        }
    }

    private static float round(float d, int decimalPlace) {
        BigDecimal bd = new BigDecimal(Float.toString(d));
        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
        return bd.floatValue();
    }

    private boolean validateIdAndQuantity() {
        boolean validated = false;
        StringBuilder sb = new StringBuilder();

        if (txtBookIdReceipt.getText().equals("")) {
            sb.append(" You have not entered the BookId\n");
        }
        Pattern bookIdPattern = Pattern.compile("^^B\\d{2}$");
        Matcher bookIdMatcher = bookIdPattern.matcher(txtBookIdReceipt.getText());
        if (!bookIdMatcher.matches()) {
            sb.append("Please enter a valid ID, e.g. B99\n");
        }

        if (txtQuantity.getText().equals("")) {
            sb.append("Please enter the quantity\n");
        }
//        Pattern quantityPattern = Pattern.compile("[^0-9]");
//        Matcher quantityMatcher = quantityPattern.matcher(txtQuantity.getText());
        if (txtQuantity.getText().matches("(^\\d)") == false) {
            sb.append("Quantity must be an integer number");
        }

        if (sb.length() != 0) {
            JOptionPane.showMessageDialog(this, sb.toString(), "Invalid information.", JOptionPane.WARNING_MESSAGE);
        }

        if (sb.length() == 0) {
            validated = true;
        }

        return validated;

    }

    private boolean validateQuantity1To100() {
        boolean validated = false;
        StringBuilder sb = new StringBuilder();

        if (Integer.parseInt(txtQuantity.getText()) < 1 || Integer.parseInt(txtQuantity.getText()) > 100) {
            sb.append("Quantity must be between 1-100");
        }

        if (sb.length() != 0) {
            JOptionPane.showMessageDialog(this, sb.toString(), "Invalid information.", JOptionPane.WARNING_MESSAGE);
        }

        if (sb.length() == 0) {
            validated = true;
        }

        return validated;
    }

    private void btnAddToReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToReceiptActionPerformed
        // TODO add your handling code here:
        if (validateIdAndQuantity()) {
            if (validateQuantity1To100()) {
                String bookId = txtBookIdReceipt.getText();
                int quantity = Integer.parseInt(txtQuantity.getText());
                BooksDao booksDao = new BooksDao();
                List<Books> listBooks = new ArrayList<>();

                try {
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    listBooks = booksDao.searchById(bookId);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                } catch (IOException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                } catch (SQLException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }

                Books currentBookItem = listBooks.get(0);
                float itemTotalPrice = currentBookItem.getPrice() * quantity;
                itemTotalPrice = round(itemTotalPrice, 2);

                ReceiptItems currentReceiptItem = new ReceiptItems();
                currentReceiptItem.setReceiptItemId(DatabaseUtils.createId());
                currentReceiptItem.setBookId(currentBookItem.getBookId());
                currentReceiptItem.setQuantity(quantity);
                currentReceiptItem.setItemTotalPrice(itemTotalPrice);

                receiptItems.add(currentReceiptItem);
                bookItems.add(currentBookItem);

                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                reloadBookItems();
                lblTotal.setText("Total: $" + String.valueOf(sumTotalPrice()));
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            } else {
                return;
            }
        } else {
            return;
        }

    }//GEN-LAST:event_btnAddToReceiptActionPerformed

    private void listAllBooks() {
        BooksDao booksDao = new BooksDao();
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tblListBookOnReceipt.getModel();
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            books = booksDao.searchAllBooks();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            if (books.size() > 0) {
                for (Books book : books) {
                    tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void btnListAllBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllBooksActionPerformed
        // TODO add your handling code here:
        listAllBooks();
    }//GEN-LAST:event_btnListAllBooksActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchInput = txtInputSearch.getText().trim();
        String searchConditionRad;
        System.out.println("Search Input: " + searchInput);
        try {
            searchConditionRad = radGroupSearch.getSelection().getActionCommand();
        } catch (Exception ex) {
            searchConditionRad = "";
        }
        System.out.println("Search Cond: " + searchConditionRad);
        if (!StringUtils.isEmpty(searchInput) && !StringUtils.isEmpty(searchConditionRad)) {
            if (searchConditionRad.equals("BookId")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblListBookOnReceipt.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchById(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            } else if (searchConditionRad.equals("Title")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblListBookOnReceipt.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchByTitle(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            } else if (searchConditionRad.equals("Author")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblListBookOnReceipt.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchByAuthors(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            } else if (searchConditionRad.equals("Publisher")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblListBookOnReceipt.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchByPublisher(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Search Term And Search Condition Are Required", "Warning", JOptionPane.WARNING_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblListBookOnReceiptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListBookOnReceiptMouseClicked
        // TODO add your handling code here:
        int column = 0;
        int row = tblListBookOnReceipt.getSelectedRow();
        String bookId = tblListBookOnReceipt.getModel().getValueAt(row, column).toString();
        txtBookIdReceipt.setText(bookId);
        txtQuantity.setText("1");
    }//GEN-LAST:event_tblListBookOnReceiptMouseClicked

    private void btnUpdateReceiptItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReceiptItemActionPerformed
        // TODO add your handling code here:
        if (validateIdAndQuantity()) {
            if (validateQuantity1To100()) {
                int confirmUpdate = JOptionPane.showConfirmDialog(this, "Are you sure to update the information of this receipt item?", "Update Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (confirmUpdate == JOptionPane.YES_OPTION) {
                    String updatedBookId = txtBookIdReceipt.getText();
                    int updatedQuantity = Integer.parseInt(txtQuantity.getText());

                    BooksDao booksDao = new BooksDao();
                    Books updatedBook = new Books();

                    try {
                        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                        updatedBook = booksDao.searchById(updatedBookId).get(0);
                        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    } catch (IOException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    } catch (SQLException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    }

                    float updatedTotalPrice = updatedBook.getPrice() * updatedQuantity;
                    updatedTotalPrice = round(updatedTotalPrice, 2);

                    receiptItems.get(selectedRow).setBookId(updatedBook.getBookId());
                    receiptItems.get(selectedRow).setQuantity(updatedQuantity);
                    receiptItems.get(selectedRow).setItemTotalPrice(updatedTotalPrice);

                    bookItems.get(selectedRow).setBookId(updatedBook.getBookId());
                    bookItems.get(selectedRow).setTitle(updatedBook.getTitle());
                    bookItems.get(selectedRow).setAuthors(updatedBook.getAuthors());
                    bookItems.get(selectedRow).setPublisher(updatedBook.getPublisher());
                    bookItems.get(selectedRow).setPrice(updatedBook.getPrice());
                    bookItems.get(selectedRow).setCoverPhoto(updatedBook.getCoverPhoto());

                    JOptionPane.showMessageDialog(this, "Update Receipt Item Successfully", "Update Receipt Item", JOptionPane.INFORMATION_MESSAGE);

                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    reloadBookItems();
                    lblTotal.setText("Total: $" + String.valueOf(sumTotalPrice()));
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                } else {
                    return;
                }
            } else {
                return;
            }
        } else {
            return;
        }

    }//GEN-LAST:event_btnUpdateReceiptItemActionPerformed

    private void tblReceiptInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReceiptInfoMouseClicked
        // TODO add your handling code here:
        int columnId = 0;
        int columnQuantity = 2;
        int row = tblReceiptInfo.getSelectedRow();
        selectedRow = row;

        String bookId = tblReceiptInfo.getModel().getValueAt(row, columnId).toString();
        String quantity = tblReceiptInfo.getModel().getValueAt(row, columnQuantity).toString();

        txtBookIdReceipt.setText(bookId);
        txtQuantity.setText(quantity);
    }//GEN-LAST:event_tblReceiptInfoMouseClicked

    private void btnDeleteReceiptItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReceiptItemActionPerformed
        // TODO add your handling code here:
        int confirmUpdate = JOptionPane.showConfirmDialog(this, "Are you sure to delete this receipt item?", "Delete Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (confirmUpdate == JOptionPane.YES_OPTION) {
            bookItems.remove(selectedRow);
            receiptItems.remove(selectedRow);

            JOptionPane.showMessageDialog(this, "Delete Receipt Successfully", "Delete Receipt", JOptionPane.INFORMATION_MESSAGE);

            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            reloadBookItems();
            lblTotal.setText("Total: $" + String.valueOf(sumTotalPrice()));
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } else {
            return;
        }

    }//GEN-LAST:event_btnDeleteReceiptItemActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tblReceiptInfo.getModel();
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
        txtBookIdReceipt.setText("");
        txtQuantity.setText("");
        selectedRow = 0;
        bookItems = new ArrayList<>();
        receiptItems = new ArrayList<>();
        lblTotal.setText("");

    }//GEN-LAST:event_btnCleanActionPerformed

    private float sumTotalPrice() {
        float sum = 0F;
        for (ReceiptItems receiptItem : receiptItems) {
            sum = sum + receiptItem.getItemTotalPrice();
        }
        sum = round(sum, 2);
        return sum;
    }

    private String getUserId() {
        String userInfoFilePath = "signin_info/signin_info.bin";
        Users user = MainClass.readUserInfo(userInfoFilePath);
        return user.getUserId();
    }

    private void insertReceiptAndReceiptItemsToDb() {
        Receipts receipt = new Receipts();
        receipt.setReceiptId(DatabaseUtils.createId());
        receipt.setUserId(getUserId());
        receipt.setCreatedOn(LocalDateTime.now());
        receipt.setTotalPrice(sumTotalPrice());
        receipt.setStatus("Paid");

        receiptId = receipt.getReceiptId();

        ReceiptsDao receiptsDao = new ReceiptsDao();
        try {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            receiptsDao.insertReceipt(receipt);
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (IOException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }

        for (ReceiptItems receiptItem : receiptItems) {
            receiptItem.setReceiptId(receipt.getReceiptId());
            ReceiptItemsDao receiptItemsDao = new ReceiptItemsDao();
            try {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                receiptItemsDao.insertReceiptItem(receiptItem);
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            } catch (IOException ex) {
//                Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            } catch (SQLException ex) {
//                Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
    }

    private void exportReceiptToPdf(String inputReceiptId) {
        ReceiptsDao receiptsDao = new ReceiptsDao();
        Receipts receipt = new Receipts();

        ReceiptItemsDao receiptItemsDao = new ReceiptItemsDao();
        List<ReceiptItems> receiptItems = new ArrayList<>();

        UsersDao usersDao = new UsersDao();
        Users user = new Users();

        String receiptId = inputReceiptId;
        try {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            receipt = receiptsDao.searchReceiptById(receiptId);
            receiptItems = receiptItemsDao.searchReceiptItemsByReceiptId(receiptId);
            user = usersDao.searchByUserId(receipt.getUserId());

            PrintReceiptPdf printReceiptPdf = new PrintReceiptPdf(receipt, receiptItems, user);
            printReceiptPdf.exportReceipt();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "Create And Export Receipt Successfully", "Create Receipt", JOptionPane.INFORMATION_MESSAGE);
            String exportedPDFFilePath = "exported_receipts/" + printReceiptPdf.getExportedFilePath();
            File manualFile = new File(exportedPDFFilePath).getAbsoluteFile();
            Desktop.getDesktop().open(manualFile);
        } catch (IOException ex) {
//            Logger.getLogger(TestExportReceipt.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
//            Logger.getLogger(TestExportReceipt.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void btnExportReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportReceiptActionPerformed
        // TODO add your handling code here:
        int confirmUpdate = JOptionPane.showConfirmDialog(this, "Are you sure to create this receipt?", "Create Receipt Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (confirmUpdate == JOptionPane.YES_OPTION) {
            insertReceiptAndReceiptItemsToDb();
            exportReceiptToPdf(receiptId);
        } else {
            return;
        }


    }//GEN-LAST:event_btnExportReceiptActionPerformed

    private void radSearchBookIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSearchBookIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radSearchBookIdActionPerformed

    private void radSearchTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSearchTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radSearchTitleActionPerformed

    public void setLanguage() {
        Locale locale;
        String language = "";
        Configurations languageConfigs = new Configurations();
        
        try {
            Configuration languageConfig = languageConfigs.properties(new File(languageConfigFilePath));
            language = languageConfig.getString("language");
        } catch (ConfigurationException ex) {
//            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        if (language.equals("vi")) {
            locale = new Locale("vi", "VN");
        } else {
            locale = Locale.getDefault();
        }
        
        ResourceBundle resourceBundle = ResourceBundle.getBundle(bundlePath, locale);
        
        btnDeleteReceiptItem.setText(resourceBundle.getString("CashierGenerateReceipt.btnDeleteReceiptItem.text"));
        btnUpdateReceiptItem.setText(resourceBundle.getString("CashierGenerateReceipt.btnUpdateReceiptItem.text"));
        btnAddToReceipt.setText(resourceBundle.getString("CashierGenerateReceipt.btnAddToReceipt.text"));
        jLabel2.setText(resourceBundle.getString("CashierGenerateReceipt.jLabel2.text"));
        jLabel1.setText(resourceBundle.getString("CashierGenerateReceipt.jLabel1.text"));
        btnListAllBooks.setText(resourceBundle.getString("CashierGenerateReceipt.btnListAllBooks.text"));
        radSearchPublisher.setText(resourceBundle.getString("CashierGenerateReceipt.radSearchPublisher.text"));
        radSearchAuthor.setText(resourceBundle.getString("CashierGenerateReceipt.radSearchAuthor.text"));
        radSearchTitle.setText(resourceBundle.getString("CashierGenerateReceipt.radSearchTitle.text"));
        radSearchBookId.setText(resourceBundle.getString("CashierGenerateReceipt.radSearchBookId.text"));
        jLabel4.setText(resourceBundle.getString("CashierGenerateReceipt.jLabel4.text"));
        btnSearch.setText(resourceBundle.getString("CashierGenerateReceipt.btnSearch.text"));
        btnExportReceipt.setText(resourceBundle.getString("CashierGenerateReceipt.btnExportReceipt.text"));
        btnClean.setText(resourceBundle.getString("CashierGenerateReceipt.btnClean.text"));
        jLabel3.setText(resourceBundle.getString("CashierGenerateReceipt.jLabel3.text"));
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToReceipt;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnDeleteReceiptItem;
    private javax.swing.JButton btnExportReceipt;
    private javax.swing.JButton btnListAllBooks;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateReceiptItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotal;
    private javax.swing.ButtonGroup radGroupSearch;
    private javax.swing.JRadioButton radSearchAuthor;
    private javax.swing.JRadioButton radSearchBookId;
    private javax.swing.JRadioButton radSearchPublisher;
    private javax.swing.JRadioButton radSearchTitle;
    private javax.swing.JTable tblListBookOnReceipt;
    private javax.swing.JTable tblReceiptInfo;
    private javax.swing.JTextField txtBookIdReceipt;
    private javax.swing.JTextField txtInputSearch;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
