/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.softech.bookstoremanagement.gui;

import com.softech.bookstoremanagement.database.dao.UsersDao;
import com.softech.bookstoremanagement.database.models.Users;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author HP
 */
public class UserManagement extends javax.swing.JPanel {

    private List<Users> users = new ArrayList<>();
    private DefaultTableModel model;
    
    /*
    Application language settings
    */
    private String bundlePath = "com.softech.bookstoremanagement.gui.Bundle";
    private String languageConfigFilePath = "language.properties";

    /**
     * Creates new form UserManagement
     */
    public UserManagement() {
        initComponents();
        reloadAll();
        this.setLanguage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        bntAdd = new javax.swing.JButton();
        bntReform = new javax.swing.JButton();
        bntDelete = new javax.swing.JButton();
        bntUpdate = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnListAllUsers = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtRetypePassword = new javax.swing.JPasswordField();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setPreferredSize(new java.awt.Dimension(1000, 490));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(1000, 553));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/softech/bookstoremanagement/gui/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("UserManagement.jLabel1.text")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText(bundle.getString("UserManagement.jLabel2.text")); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText(bundle.getString("UserManagement.jLabel3.text")); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText(bundle.getString("UserManagement.jLabel5.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText(bundle.getString("UserManagement.jLabel6.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText(bundle.getString("UserManagement.jLabel7.text")); // NOI18N

        txtID.setPreferredSize(new java.awt.Dimension(400, 20));

        txtLastName.setPreferredSize(new java.awt.Dimension(400, 20));

        txtUsername.setPreferredSize(new java.awt.Dimension(400, 20));

        txtFirstName.setPreferredSize(new java.awt.Dimension(400, 20));

        txtEmail.setPreferredSize(new java.awt.Dimension(400, 20));

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "First Name", "Last Name", "Email", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUsers);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(0).setMinWidth(80);
            tblUsers.getColumnModel().getColumn(0).setPreferredWidth(80);
            tblUsers.getColumnModel().getColumn(0).setMaxWidth(80);
        }

        bntAdd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bntAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-plus-+-18.png"))); // NOI18N
        bntAdd.setText(bundle.getString("UserManagement.bntAdd.text")); // NOI18N
        bntAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntAddActionPerformed(evt);
            }
        });

        bntReform.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bntReform.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-brush-18.png"))); // NOI18N
        bntReform.setText(bundle.getString("UserManagement.bntReform.text")); // NOI18N
        bntReform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntReformActionPerformed(evt);
            }
        });

        bntDelete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bntDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-delete-bin-18.png"))); // NOI18N
        bntDelete.setText(bundle.getString("UserManagement.bntDelete.text")); // NOI18N
        bntDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntDeleteActionPerformed(evt);
            }
        });

        bntUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bntUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-map-editing-18.png"))); // NOI18N
        bntUpdate.setText(bundle.getString("UserManagement.bntUpdate.text")); // NOI18N
        bntUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntUpdateActionPerformed(evt);
            }
        });

        btnListAllUsers.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnListAllUsers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-to-do-list-18.png"))); // NOI18N
        btnListAllUsers.setText(bundle.getString("UserManagement.btnListAllUsers.text")); // NOI18N
        btnListAllUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllUsersActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText(bundle.getString("UserManagement.jLabel10.text")); // NOI18N

        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText(bundle.getString("UserManagement.jLabel11.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(417, 417, 417)
                .addComponent(btnListAllUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(bntAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(bntUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(bntDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(bntReform, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6)
                                .addComponent(jLabel10)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                        .addGap(110, 110, 110))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntReform, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnListAllUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cleanForm() {
        txtID.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtRetypePassword.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
    }

    private void reloadAll() {
        UsersDao usersDao = new UsersDao();
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tblUsers.getModel();
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            users = usersDao.searchAllUsers();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            if (users.size() > 0) {
                for (Users user : users) {
                    tableModel.addRow(new Object[]{user.getUserId(), user.getUsername(), user.getFirstName(), user.getLastName(), user.getEmail(), user.getPhone()});
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
//            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
//            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    public boolean validateAddUser() {
        boolean validated = false;
        StringBuilder warningContent = new StringBuilder();

        String userId = txtID.getText().trim();
        String username = txtUsername.getText().trim();
        String password = String.valueOf(txtPassword.getPassword());
        String retypePassword = String.valueOf(txtRetypePassword.getPassword());
        String firstName = txtFirstName.getText().trim();
        String lastName = txtLastName.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();

        if (StringUtils.isEmpty(userId)) {
            warningContent.append("User ID Is Required\n");
        }
        if (StringUtils.isEmpty(username)) {
            warningContent.append("Username Is Required\n");
        }
        if (username.length() > 20) {
            warningContent.append("Username Should Be Less Than 20 Characters");
        }
        if (StringUtils.isEmpty(password)) {
            warningContent.append("Password Is Required\n");
        }
        if (StringUtils.isEmpty(retypePassword)) {
            warningContent.append("Please Retype The Password\n");
        }
        if (StringUtils.isNotEmpty(password) && !password.equals(retypePassword)) {
            warningContent.append("Retype Passwords Do Not Match\n");
        }
        if (StringUtils.isEmpty(firstName)) {
            warningContent.append("First Name Is Required\n");
        }
        if (StringUtils.isEmpty(lastName)) {
            warningContent.append("Last Name Is Required\n");
        }
        if (StringUtils.isEmpty(email)) {
            warningContent.append("Email Is Required\n");
        }
        Pattern emailPattern = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
        Matcher matcherEmail = emailPattern.matcher(email);
        if (matcherEmail.matches() == false) {
            warningContent.append("Please Enter A Valid Email Address\n");
        }
        if (StringUtils.isEmpty(phone)) {
            warningContent.append("Phone Number Is Required\n");
        }
        Pattern phonePattern = Pattern.compile("^\\d{10}");
        Matcher matcherPhone = phonePattern.matcher(phone);
        if (matcherPhone.matches() == false) {
            warningContent.append("Please Enter Digital Characters Only Into Phone Field");
        }
        if (StringUtils.isNotEmpty(warningContent)) {
            JOptionPane.showMessageDialog(this, warningContent, "Create User Warning\n", JOptionPane.WARNING_MESSAGE);
        }
        if (StringUtils.isEmpty(warningContent)) {
            validated = true;
        }
        return validated;
    }

    public boolean validateUpdateUser() {
        boolean validated = false;
        StringBuilder warningContent = new StringBuilder();

        String userId = txtID.getText().trim();
        String username = txtUsername.getText().trim();
        String password = String.valueOf(txtPassword.getPassword());
        String retypePassword = String.valueOf(txtRetypePassword.getPassword());
        String firstName = txtFirstName.getText().trim();
        String lastName = txtLastName.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();

        if (StringUtils.isEmpty(userId)) {
            warningContent.append("User ID Is Required\n");
        }
        if (StringUtils.isEmpty(username)) {
            warningContent.append("Username Is Required\n");
        }
        if (username.length() > 20) {
            warningContent.append("Username Should Be Less Than 20 Characters");
        }
//        if (StringUtils.isEmpty(password)) {
//            warningContent.append("Password Is Required\n");
//        }
//        if (StringUtils.isEmpty(retypePassword)) {
//            warningContent.append("Please Retype The Password\n");
//        }
        if (StringUtils.isNotEmpty(password) && !password.equals(retypePassword)) {
            warningContent.append("Retype Passwords Do Not Match\n");
        }
        if (StringUtils.isEmpty(firstName)) {
            warningContent.append("First Name Is Required\n");
        }
        if (StringUtils.isEmpty(lastName)) {
            warningContent.append("Last Name Is Required\n");
        }
        if (StringUtils.isEmpty(email)) {
            warningContent.append("Email Is Required\n");
        }
        Pattern emailPattern = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
        Matcher matcherEmail = emailPattern.matcher(email);
        if (matcherEmail.matches() == false) {
            warningContent.append("Please Enter A Valid Email Address\n");
        }
        if (StringUtils.isEmpty(phone)) {
            warningContent.append("Phone Number Is Required\n");
        }
        Pattern phonePattern = Pattern.compile("^\\d{10}");
        Matcher matcherPhone = phonePattern.matcher(phone);
        if (matcherPhone.matches() == false) {
            warningContent.append("Please Enter Digital Characters Only Into Phone Field");
        }
        if (StringUtils.isNotEmpty(warningContent)) {
            JOptionPane.showMessageDialog(this, warningContent, "Create User Warning\n", JOptionPane.WARNING_MESSAGE);
        }
        if (StringUtils.isEmpty(warningContent)) {
            validated = true;
        }
        return validated;
    }

    private void bntDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntDeleteActionPerformed
        // TODO add your handling code here:
        int confirmDelete = JOptionPane.showConfirmDialog(this, "Are you sure to delete this user account?", "Delete Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirmDelete == JOptionPane.YES_OPTION) {
            String userId = txtID.getText().trim();
            UsersDao usersDao = new UsersDao();
            try {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                usersDao.deleteUser(userId);
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(this, "Delete User Successfully", "Delete User", JOptionPane.INFORMATION_MESSAGE);
                reloadAll();
                cleanForm();
            } catch (IOException ex) {
//            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            } catch (SQLException ex) {
//            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        } else {
            return;
        }

    }//GEN-LAST:event_bntDeleteActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void btnListAllUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllUsersActionPerformed
        // TODO add your handling code here:
        reloadAll();
    }//GEN-LAST:event_btnListAllUsersActionPerformed

    private void bntReformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntReformActionPerformed
        // TODO add your handling code here:
        cleanForm();
    }//GEN-LAST:event_bntReformActionPerformed

    private void bntAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAddActionPerformed
        // TODO add your handling code here:
        if (validateAddUser()) {
            UsersDao usersDao = new UsersDao();
            Users user = new Users();

            if (txtPassword.getPassword().length > 0 && Arrays.equals(txtPassword.getPassword(), txtRetypePassword.getPassword())) {
                user.setUserId(txtID.getText().trim());
                user.setUsername(txtUsername.getText().trim());
                user.setPassword(String.valueOf(txtPassword.getPassword()));
                user.setFirstName(txtFirstName.getText().trim());
                user.setLastName(txtLastName.getText().trim());
                user.setEmail(txtEmail.getText().trim());
                user.setPhone(txtPhone.getText().trim());
                user.setRole("cashier");
                try {
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    usersDao.insertUser(user);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    JOptionPane.showMessageDialog(this, "Add User Successfully", "Add User", JOptionPane.INFORMATION_MESSAGE);
                    reloadAll();
                } catch (IOException ex) {
//                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                } catch (SQLException ex) {
//                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                } finally {
                    cleanForm();
                }
            }
        } else {
            return;
        }
    }//GEN-LAST:event_bntAddActionPerformed

    private void bntUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntUpdateActionPerformed
        // TODO add your handling code here:
        if (validateUpdateUser()) {
            int confirmUpdate = JOptionPane.showConfirmDialog(this, "Are you sure to update the information of this user?", "Update Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirmUpdate == JOptionPane.YES_OPTION) {
                UsersDao usersDao = new UsersDao();
                Users user = new Users();
                if (txtPassword.getPassword().length > 0) {
                    if (Arrays.equals(txtPassword.getPassword(), txtRetypePassword.getPassword())) {
                        user.setUserId(txtID.getText().trim());
                        user.setUsername(txtUsername.getText().trim());
                        user.setPassword(String.valueOf(txtPassword.getPassword()));
                        user.setFirstName(txtFirstName.getText().trim());
                        user.setLastName(txtLastName.getText().trim());
                        user.setEmail(txtEmail.getText().trim());
                        user.setPhone(txtPhone.getText().trim());
                        user.setRole("cashier");
                        try {
                            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                            usersDao.updateUser(user);
                            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                            JOptionPane.showMessageDialog(this, "Update User Successfully", "Update User", JOptionPane.INFORMATION_MESSAGE);
                            reloadAll();
                        } catch (IOException ex) {
//                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                            ex.printStackTrace();
                        } catch (SQLException ex) {
//                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                            ex.printStackTrace();
                        } finally {
                            cleanForm();
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please Retype The Correct Password", "Retype Password Warning", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    user.setUserId(txtID.getText().trim());
                    user.setUsername(txtUsername.getText().trim());
                    user.setPassword("");
                    user.setFirstName(txtFirstName.getText().trim());
                    user.setLastName(txtLastName.getText().trim());
                    user.setEmail(txtEmail.getText().trim());
                    user.setPhone(txtPhone.getText().trim());
                    user.setRole("cashier");
                    try {
                        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                        usersDao.updateUser(user);
                        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        JOptionPane.showMessageDialog(this, "Update User Successfully", "Update User", JOptionPane.INFORMATION_MESSAGE);
                        reloadAll();
                    } catch (IOException ex) {
//                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    } catch (SQLException ex) {
//                Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    } finally {
                        cleanForm();
                    }
                }
            } else {
                return;
            }

        } else {
            return;
        }


    }//GEN-LAST:event_bntUpdateActionPerformed

    private void tblUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsersMouseClicked
        // TODO add your handling code here:
        cleanForm();
        int column = 0;
        int row = tblUsers.getSelectedRow();
        String selectedUserId = tblUsers.getModel().getValueAt(row, column).toString();

        for (int i = 0; i < users.size(); i++) {
            Users user = users.get(i);
            if (user.getUserId().equals(selectedUserId)) {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                txtID.setText(user.getUserId());
                txtUsername.setText(user.getUsername());
                txtPassword.setText("");
                txtRetypePassword.setText("");
                txtFirstName.setText(user.getFirstName());
                txtLastName.setText(user.getLastName());
                txtEmail.setText(user.getEmail());
                txtPhone.setText(user.getPhone());
                System.out.println(row);
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            }
        }


    }//GEN-LAST:event_tblUsersMouseClicked

    public void setLanguage() {
        Locale locale;
        String language = "";
        Configurations languageConfigs = new Configurations();
        
        try {
            Configuration languageConfig = languageConfigs.properties(new File(languageConfigFilePath));
            language = languageConfig.getString("language");
        } catch (ConfigurationException ex) {
//            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        if (language.equals("vi")) {
            locale = new Locale("vi", "VN");
        } else {
            locale = Locale.getDefault();
        }
        
        ResourceBundle resourceBundle = ResourceBundle.getBundle(bundlePath, locale);

        bntAdd.setText(resourceBundle.getString("UserManagement.bntAdd.text"));
        jLabel7.setText(resourceBundle.getString("UserManagement.jLabel7.text"));
        jLabel6.setText(resourceBundle.getString("UserManagement.jLabel6.text"));
        jLabel5.setText(resourceBundle.getString("UserManagement.jLabel5.text"));
        jLabel3.setText(resourceBundle.getString("UserManagement.jLabel3.text"));
        jLabel2.setText(resourceBundle.getString("UserManagement.jLabel2.text"));
        jLabel1.setText(resourceBundle.getString("UserManagement.jLabel1.text"));
        jLabel11.setText(resourceBundle.getString("UserManagement.jLabel11.text"));
        jLabel10.setText(resourceBundle.getString("UserManagement.jLabel10.text"));
        btnListAllUsers.setText(resourceBundle.getString("UserManagement.btnListAllUsers.text"));
        bntUpdate.setText(resourceBundle.getString("UserManagement.bntUpdate.text"));
        bntDelete.setText(resourceBundle.getString("UserManagement.bntDelete.text"));
                
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAdd;
    private javax.swing.JButton bntDelete;
    private javax.swing.JButton bntReform;
    private javax.swing.JButton bntUpdate;
    private javax.swing.JButton btnListAllUsers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JPasswordField txtRetypePassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
