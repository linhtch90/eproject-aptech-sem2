/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.softech.bookstoremanagement.gui;

import com.softech.bookstoremanagement.database.dao.BooksDao;
import com.softech.bookstoremanagement.database.models.Books;

import com.softech.bookstoremanagement.database.utils.DatabaseUtils;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author Linh
 */
public class BookManagement extends javax.swing.JPanel {

    private File f;

    private List<Books> books = new ArrayList<>();
    
    /*
    Application language settings
    */
    private String bundlePath = "com.softech.bookstoremanagement.gui.Bundle";
    private String languageConfigFilePath = "language.properties";

//    private DefaultTableModel model;
//
//    private String[] columnTitles = new String[]{" BookId ", " Title", "Author", " Publisher ", " Price"};
//    private void table() {
//        model = new DefaultTableModel();
//        model.setColumnIdentifiers(columnTitles);
//
//        books.forEach(item -> {
//            model.addRow(new Object[]{item.getBookId(), item.getAuthors(), item.getTitle(),
//                item.getPublisher(), item.getPrice()});
//        });
//        tblBookTable.setModel(model);
//
//    }
    /**
     * Creates new form BookManagement
     */
    public BookManagement() {
        initComponents();
        /*
        Set value for radio box below search text field
         */
        radSearchBookId.setActionCommand("BookId");
        radSearchTitle.setActionCommand("Title");
        radSearchAuthor.setActionCommand("Author");
        radSearchPublisher.setActionCommand("Publisher");
        /*
        Right alignmnet for price column
         */
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        tblBookTable.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        
        listAllBooks();
        
        this.setLanguage();

//        table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radGroupSearch = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        txtSearcInput = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        radSearchBookId = new javax.swing.JRadioButton();
        radSearchTitle = new javax.swing.JRadioButton();
        radSearchAuthor = new javax.swing.JRadioButton();
        radSearchPublisher = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBookTable = new javax.swing.JTable();
        btnListAllBooks = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        pnlDetailInformation = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        lblCoverPhotoPlaceholder = new javax.swing.JLabel();
        lblBookId = new javax.swing.JLabel();
        txtBookId = new javax.swing.JTextField();
        lblBookTitle = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        lblPublisher = new javax.swing.JLabel();
        txtPublisher = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaTitle = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaAuthor = new javax.swing.JTextArea();
        btnCreateBook = new javax.swing.JButton();
        btnUpdateBook = new javax.swing.JButton();
        btnDeleteBook = new javax.swing.JButton();
        btnCleanAll = new javax.swing.JButton();

        setBorder(new EmptyBorder(5, 5, 5, 5));
        setPreferredSize(new java.awt.Dimension(1000, 520));
        setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/softech/bookstoremanagement/gui/Bundle"); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("BookManagement.jPanel1.border.title"))); // NOI18N
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel6.setPreferredSize(new java.awt.Dimension(583, 70));

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-search-18 (2).png"))); // NOI18N
        btnSearch.setText(bundle.getString("BookManagement.btnSearch.text")); // NOI18N
        btnSearch.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSearch.setPreferredSize(new java.awt.Dimension(60, 25));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText(bundle.getString("BookManagement.jLabel1.text")); // NOI18N

        radGroupSearch.add(radSearchBookId);
        radSearchBookId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchBookId.setText(bundle.getString("BookManagement.radSearchBookId.text")); // NOI18N

        radGroupSearch.add(radSearchTitle);
        radSearchTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchTitle.setText(bundle.getString("BookManagement.radSearchTitle.text")); // NOI18N
        radSearchTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSearchTitleActionPerformed(evt);
            }
        });

        radGroupSearch.add(radSearchAuthor);
        radSearchAuthor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchAuthor.setText(bundle.getString("BookManagement.radSearchAuthor.text")); // NOI18N

        radGroupSearch.add(radSearchPublisher);
        radSearchPublisher.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radSearchPublisher.setText(bundle.getString("BookManagement.radSearchPublisher.text")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(radSearchTitle)
                        .addGap(6, 6, 6)
                        .addComponent(radSearchBookId)
                        .addGap(18, 18, 18)
                        .addComponent(radSearchAuthor)
                        .addGap(18, 18, 18)
                        .addComponent(radSearchPublisher))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(txtSearcInput, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearcInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(radSearchBookId)
                    .addComponent(radSearchTitle)
                    .addComponent(radSearchAuthor)
                    .addComponent(radSearchPublisher))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6);

        tblBookTable.setAutoCreateRowSorter(true);
        tblBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book ID", "Title", "Author", "Publisher", "Price ($)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblBookTable);
        if (tblBookTable.getColumnModel().getColumnCount() > 0) {
            tblBookTable.getColumnModel().getColumn(0).setMinWidth(50);
            tblBookTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblBookTable.getColumnModel().getColumn(0).setMaxWidth(50);
            tblBookTable.getColumnModel().getColumn(1).setMinWidth(200);
            tblBookTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblBookTable.getColumnModel().getColumn(1).setMaxWidth(200);
            tblBookTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            tblBookTable.getColumnModel().getColumn(4).setMinWidth(50);
            tblBookTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            tblBookTable.getColumnModel().getColumn(4).setMaxWidth(50);
        }

        btnListAllBooks.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnListAllBooks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-to-do-list-18.png"))); // NOI18N
        btnListAllBooks.setText(bundle.getString("BookManagement.btnListAllBooks.text")); // NOI18N
        btnListAllBooks.setPreferredSize(new java.awt.Dimension(90, 25));
        btnListAllBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllBooksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(btnListAllBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnListAllBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jPanel1.add(jPanel7);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setPreferredSize(new java.awt.Dimension(1000, 5));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel4.setPreferredSize(new java.awt.Dimension(0, 590));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );

        add(jPanel4, java.awt.BorderLayout.LINE_END);

        pnlDetailInformation.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("BookManagement.pnlDetailInformation.border.title"))); // NOI18N
        pnlDetailInformation.setPreferredSize(new java.awt.Dimension(400, 590));

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setPreferredSize(new java.awt.Dimension(200, 200));

        lblCoverPhotoPlaceholder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCoverPhotoPlaceholder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCoverPhotoPlaceholderMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblCoverPhotoPlaceholderMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblCoverPhotoPlaceholderMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCoverPhotoPlaceholder, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCoverPhotoPlaceholder, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        lblBookId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblBookId.setText(bundle.getString("BookManagement.lblBookId.text")); // NOI18N

        lblBookTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblBookTitle.setText(bundle.getString("BookManagement.lblBookTitle.text")); // NOI18N

        lblAuthor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAuthor.setText(bundle.getString("BookManagement.lblAuthor.text")); // NOI18N

        lblPublisher.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPublisher.setText(bundle.getString("BookManagement.lblPublisher.text")); // NOI18N

        lblPrice.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPrice.setText(bundle.getString("BookManagement.lblPrice.text")); // NOI18N

        txaTitle.setColumns(20);
        txaTitle.setLineWrap(true);
        txaTitle.setRows(5);
        txaTitle.setWrapStyleWord(true);
        txaTitle.setPreferredSize(new java.awt.Dimension(164, 45));
        jScrollPane1.setViewportView(txaTitle);

        txaAuthor.setColumns(20);
        txaAuthor.setLineWrap(true);
        txaAuthor.setRows(5);
        txaAuthor.setWrapStyleWord(true);
        txaAuthor.setPreferredSize(new java.awt.Dimension(164, 45));
        jScrollPane2.setViewportView(txaAuthor);

        btnCreateBook.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCreateBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-plus-+-18.png"))); // NOI18N
        btnCreateBook.setText(bundle.getString("BookManagement.btnCreateBook.text")); // NOI18N
        btnCreateBook.setPreferredSize(new java.awt.Dimension(130, 25));
        btnCreateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateBookActionPerformed(evt);
            }
        });

        btnUpdateBook.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdateBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-map-editing-18.png"))); // NOI18N
        btnUpdateBook.setText(bundle.getString("BookManagement.btnUpdateBook.text")); // NOI18N
        btnUpdateBook.setPreferredSize(new java.awt.Dimension(130, 25));
        btnUpdateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateBookActionPerformed(evt);
            }
        });

        btnDeleteBook.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDeleteBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-delete-bin-18.png"))); // NOI18N
        btnDeleteBook.setText(bundle.getString("BookManagement.btnDeleteBook.text")); // NOI18N
        btnDeleteBook.setPreferredSize(new java.awt.Dimension(140, 25));
        btnDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookActionPerformed(evt);
            }
        });

        btnCleanAll.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCleanAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-brush-18.png"))); // NOI18N
        btnCleanAll.setText(bundle.getString("BookManagement.btnCleanAll.text")); // NOI18N
        btnCleanAll.setPreferredSize(new java.awt.Dimension(140, 25));
        btnCleanAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDetailInformationLayout = new javax.swing.GroupLayout(pnlDetailInformation);
        pnlDetailInformation.setLayout(pnlDetailInformationLayout);
        pnlDetailInformationLayout.setHorizontalGroup(
            pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailInformationLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetailInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblBookTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAuthor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPublisher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBookId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPublisher)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtBookId, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPrice)
                    .addGroup(pnlDetailInformationLayout.createSequentialGroup()
                        .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDeleteBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDetailInformationLayout.createSequentialGroup()
                                .addComponent(btnCleanAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 1, Short.MAX_VALUE))
                            .addComponent(btnUpdateBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlDetailInformationLayout.setVerticalGroup(
            pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailInformationLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookId)
                    .addComponent(txtBookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBookTitle)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAuthor)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPublisher)
                    .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(pnlDetailInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCleanAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(pnlDetailInformation, java.awt.BorderLayout.LINE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void reloadAll() {
        BooksDao booksDao = new BooksDao();
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tblBookTable.getModel();
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            books = booksDao.searchAllBooks();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            if (books.size() > 0) {
                for (Books book : books) {
                    tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    private void cleanForm() {
        txtBookId.setText("");
        txaTitle.setText("");
        txaAuthor.setText("");
        txtPublisher.setText("");
        txtPrice.setText("");
        lblCoverPhotoPlaceholder.setIcon(null);
        lblCoverPhotoPlaceholder.setText("");
    }

    private void listAllBooks() {
        BooksDao booksDao = new BooksDao();
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tblBookTable.getModel();
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            books = booksDao.searchAllBooks();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            if (books.size() > 0) {
                for (Books book : books) {
                    tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void btnListAllBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllBooksActionPerformed
        // TODO add your handling code here:
        listAllBooks();

    }//GEN-LAST:event_btnListAllBooksActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchInput = txtSearcInput.getText().trim();
        String searchConditionRad;
        System.out.println("Search Input: " + searchInput);
        try {
            searchConditionRad = radGroupSearch.getSelection().getActionCommand();
        } catch (Exception ex) {
            searchConditionRad = "";
        }
        System.out.println("Search Cond: " + searchConditionRad);
        if (!StringUtils.isEmpty(searchInput) && !StringUtils.isEmpty(searchConditionRad)) {
            if (searchConditionRad.equals("BookId")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblBookTable.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchById(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            } else if (searchConditionRad.equals("Title")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblBookTable.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchByTitle(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            } else if (searchConditionRad.equals("Author")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblBookTable.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchByAuthors(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            } else if (searchConditionRad.equals("Publisher")) {
                BooksDao booksDao = new BooksDao();
                try {
                    DefaultTableModel tableModel = (DefaultTableModel) tblBookTable.getModel();
                    while (tableModel.getRowCount() > 0) {
                        tableModel.removeRow(0);
                    }
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    books = booksDao.searchByPublisher(searchInput);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    if (books.size() > 0) {
                        for (Books book : books) {
                            tableModel.addRow(new Object[]{book.getBookId(), book.getTitle(), book.getAuthors(), book.getPublisher(), book.getPrice()});
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Search Term And Search Condition Are Required", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed


    private void tblBookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookTableMouseClicked
        // TODO add your handling code here:
        int column = 0;
        int row = tblBookTable.getSelectedRow();
        String bookId = tblBookTable.getModel().getValueAt(row, column).toString();

        for (int i = 0; i < books.size(); i++) {
            Books book = books.get(i);
            if (book.getBookId().equals(bookId)) {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                txtBookId.setText(book.getBookId());
                txaTitle.setText(book.getTitle());
                txaAuthor.setText(book.getAuthors());
                txtPublisher.setText(book.getPublisher());
                txtPrice.setText(String.valueOf(book.getPrice()));

                try {
                    ByteArrayInputStream coverPhotoInputStream = new ByteArrayInputStream(book.getCoverPhoto());
                    java.awt.Image coverPhoto = null;
                    coverPhoto = ImageIO.read(coverPhotoInputStream);
                    coverPhoto = coverPhoto.getScaledInstance(196, 196, java.awt.Image.SCALE_SMOOTH);
                    ImageIcon coverPhotoIcon = new ImageIcon(coverPhoto);
                    lblCoverPhotoPlaceholder.setIcon(coverPhotoIcon);
                } catch (Exception ex) {
//            Logger.getLogger(BookManagement.class.getName()).log(Level.SEVERE, null, ex);
                    lblCoverPhotoPlaceholder.setIcon(null);
                    lblCoverPhotoPlaceholder.setText("");
                    ex.printStackTrace();
                }
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }

//        BooksDao booksDao = new BooksDao();
//        List<Books> results = new ArrayList<>();
//        try {
//            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
//            results = booksDao.searchById(bookId);
//            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
//        } catch (IOException ex) {
//            ex.printStackTrace();
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
//
//        Books book = results.get(0);
//
//        txtBookId.setText(book.getBookId());
//        txaTitle.setText(book.getTitle());
//        txaAuthor.setText(book.getAuthors());
//        txtPublisher.setText(book.getPublisher());
//        txtPrice.setText(String.valueOf(book.getPrice()));
//
//        ByteArrayInputStream coverPhotoInputStream = new ByteArrayInputStream(book.getCoverPhoto());
//        java.awt.Image coverPhoto = null;
//        try {
//            coverPhoto = ImageIO.read(coverPhotoInputStream);
//            coverPhoto = coverPhoto.getScaledInstance(196, 196, java.awt.Image.SCALE_SMOOTH);
//            ImageIcon coverPhotoIcon = new ImageIcon(coverPhoto);
//            lblCoverPhotoPlaceholder.setIcon(coverPhotoIcon);
//        } catch (IOException ex) {
////            Logger.getLogger(BookManagement.class.getName()).log(Level.SEVERE, null, ex);
//            lblCoverPhotoPlaceholder.setIcon(null);
//            lblCoverPhotoPlaceholder.setText("");
//            ex.printStackTrace();
//        }

    }//GEN-LAST:event_tblBookTableMouseClicked

    private void btnCleanAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanAllActionPerformed
        cleanForm();
    }//GEN-LAST:event_btnCleanAllActionPerformed

    private boolean validateBookForm() {
        boolean validated = false;
        StringBuilder sb = new StringBuilder();
        if (txtBookId.getText().equals("")) {
            sb.append(" You have not entered the BookId.\n");
        }
        Pattern bookIdPattern = Pattern.compile("^^B\\d{2}$");
        Matcher bookIdMatcher = bookIdPattern.matcher(txtBookId.getText());
        if (!bookIdMatcher.matches()) {
            sb.append("Please enter a valid ID, e.g. B99\n");
        }

        if (txaAuthor.getText().equals("")) {
            sb.append(" You have not entered the Author.\n");
        }

        if (txaTitle.getText().equals("")) {
            sb.append(" You have not entered Title.\n");
        }

        if (txtPublisher.getText().equals("")) {
            sb.append(" You have not entered Publisher\n");
        }

        if (txtPrice.getText().equals("")) {
            sb.append(" You have not entered Price.\n");
        }
        Pattern pricePattern = Pattern.compile("^^(\\d+)\\.(\\d+)$");
        Matcher priceMatcher = pricePattern.matcher(txtPrice.getText());
        if (!priceMatcher.matches()) {
            sb.append("Price must be a float number, e.g. 4.25\n");
        }

        if (sb.length() != 0) {
            JOptionPane.showMessageDialog(this, sb.toString(), "Create Book Warning", JOptionPane.WARNING_MESSAGE);
        }

        if (sb.length() == 0) {
            validated = true;
        }

        return validated;
    }

    public boolean validateId() {
        boolean validated = false;
        StringBuilder sb = new StringBuilder();
        if (txtBookId.getText().equals("")) {
            sb.append(" You have not entered the BookId.\n");
        }
        Pattern bookIdPattern = Pattern.compile("^^B\\d{2}$");
        Matcher bookIdMatcher = bookIdPattern.matcher(txtBookId.getText());
        if (!bookIdMatcher.matches()) {
            sb.append("Please enter a valid ID, e.g. B99\n");
        }

        if (sb.length() != 0) {
            JOptionPane.showMessageDialog(this, sb.toString(), " You have not added book information.", JOptionPane.WARNING_MESSAGE);
        }

        if (sb.length() == 0) {
            validated = true;
        }

        return validated;
    }

    private void btnCreateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateBookActionPerformed
        if (validateBookForm()) {
            try {
                Books book = new Books();

                book.setBookId(txtBookId.getText().trim());
                book.setAuthors(txaAuthor.getText().trim());
                book.setTitle(txaTitle.getText().trim());
                book.setPublisher(txtPublisher.getText().trim());
                book.setPrice(Float.parseFloat(txtPrice.getText().trim()));
//            FileInputStream fis = new FileInputStream(f);

                try {
                    byte[] coverPhotoArray = Files.readAllBytes(f.toPath());
                    book.setCoverPhoto(coverPhotoArray);
                } catch (Exception ex) {
                    System.out.println("File path error...");
                    ex.printStackTrace();
                }

                BooksDao dao = new BooksDao();
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                dao.insertBook(book);
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(this, "Create Book Successfully", "Create Book", JOptionPane.INFORMATION_MESSAGE);
                reloadAll();

            } catch (Exception e) {
//                JOptionPane.showMessageDialog(this, " Errors " + e.getMessage());
                e.printStackTrace();
            }

            reloadAll();
        } else {
            return;
        }

    }//GEN-LAST:event_btnCreateBookActionPerformed

    private void lblCoverPhotoPlaceholderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCoverPhotoPlaceholderMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter imageFilter = new FileNameExtensionFilter("Image", "png", "jpg");

        fileChooser.setFileFilter(imageFilter);
        fileChooser.setMultiSelectionEnabled(false);
        int x = fileChooser.showDialog(this, "Choose File");

        if (x == JFileChooser.APPROVE_OPTION) {
            f = fileChooser.getSelectedFile();
            java.awt.Image coverPhoto = null;
            java.awt.Image coverPhotoScale = null;
            try {
                InputStream chooseFileStream = new FileInputStream(f);
                coverPhoto = ImageIO.read(chooseFileStream);
                coverPhotoScale = coverPhoto.getScaledInstance(196, 196, java.awt.Image.SCALE_SMOOTH);
                lblCoverPhotoPlaceholder.setIcon(new ImageIcon(coverPhotoScale));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(BookManagement.class.getName()).log(Level.SEVERE, null, ex);
                lblCoverPhotoPlaceholder.setText("");
            } catch (IOException ex) {
                Logger.getLogger(BookManagement.class.getName()).log(Level.SEVERE, null, ex);
                lblCoverPhotoPlaceholder.setText("");
            }

        }

    }//GEN-LAST:event_lblCoverPhotoPlaceholderMouseClicked

    private void lblCoverPhotoPlaceholderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCoverPhotoPlaceholderMousePressed
        // TODO add your handling code here:
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    }//GEN-LAST:event_lblCoverPhotoPlaceholderMousePressed

    private void lblCoverPhotoPlaceholderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCoverPhotoPlaceholderMouseReleased
        // TODO add your handling code here:
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    }//GEN-LAST:event_lblCoverPhotoPlaceholderMouseReleased

    private void btnUpdateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateBookActionPerformed
        // TODO add your handling code here:
        if (validateBookForm()) {
            int confirmUpdate = JOptionPane.showConfirmDialog(this, "Are you sure to update the information of this book?", "Update Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirmUpdate == JOptionPane.YES_OPTION) {
                try {
                    Books book = new Books();

                    book.setBookId(txtBookId.getText().trim());
                    book.setAuthors(txaAuthor.getText().trim());
                    book.setTitle(txaTitle.getText().trim());
                    book.setPublisher(txtPublisher.getText().trim());
                    book.setPrice(Float.parseFloat(txtPrice.getText().trim()));
//            FileInputStream fis = new FileInputStream(f);

                    try {
                        byte[] coverPhotoArray = Files.readAllBytes(f.toPath());
                        book.setCoverPhoto(coverPhotoArray);
                    } catch (Exception ex) {
                        System.out.println("File path error...");
                        ex.printStackTrace();
                    }

                    BooksDao dao = new BooksDao();
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    dao.updateBook(book);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    JOptionPane.showMessageDialog(this, "Update Book Successfully", "Update Book", JOptionPane.INFORMATION_MESSAGE);
                    reloadAll();

                } catch (Exception e) {
//                JOptionPane.showMessageDialog(this, " Errors " + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                return;
            }

        } else {
            return;
        }
    }//GEN-LAST:event_btnUpdateBookActionPerformed

    private void btnDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookActionPerformed
        // TODO add your handling code here:
        if (validateId()) {
            int confirmDelete = JOptionPane.showConfirmDialog(this, "Are you sure to delete this book?", "Delete Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirmDelete == JOptionPane.YES_OPTION) {
                String bookId = txtBookId.getText().trim();
                BooksDao booksDao = new BooksDao();

                try {
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    booksDao.deleteBook(bookId);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    JOptionPane.showMessageDialog(this, "Delete Book Successfully", "Delete Book", JOptionPane.INFORMATION_MESSAGE);
                    reloadAll();
                    cleanForm();
                } catch (IOException ex) {
//                Logger.getLogger(BookManagement.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                } catch (SQLException ex) {
//                Logger.getLogger(BookManagement.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
            } else {
                return;
            }

        } else {
            return;
        }
    }//GEN-LAST:event_btnDeleteBookActionPerformed

    private void radSearchTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSearchTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radSearchTitleActionPerformed

    public void setLanguage() {
        Locale locale;
        String language = "";
        Configurations languageConfigs = new Configurations();
        
        try {
            Configuration languageConfig = languageConfigs.properties(new File(languageConfigFilePath));
            language = languageConfig.getString("language");
        } catch (ConfigurationException ex) {
//            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        if (language.equals("vi")) {
            locale = new Locale("vi", "VN");
        } else {
            locale = Locale.getDefault();
        }
        
        ResourceBundle resourceBundle = ResourceBundle.getBundle(bundlePath, locale);

        lblBookId.setText(resourceBundle.getString("BookManagement.lblBookId.text"));
        radSearchAuthor.setText(resourceBundle.getString("BookManagement.radSearchAuthor.text"));
        radSearchTitle.setText(resourceBundle.getString("BookManagement.radSearchTitle.text"));
        radSearchBookId.setText(resourceBundle.getString("BookManagement.radSearchBookId.text"));
        jLabel1.setText(resourceBundle.getString("BookManagement.jLabel1.text"));
        btnSearch.setText(resourceBundle.getString("BookManagement.btnSearch.text"));
        btnCleanAll.setText(resourceBundle.getString("BookManagement.btnCleanAll.text"));
        btnDeleteBook.setText(resourceBundle.getString("BookManagement.btnDeleteBook.text"));
        btnListAllBooks.setText(resourceBundle.getString("BookManagement.btnListAllBooks.text"));
        btnUpdateBook.setText(resourceBundle.getString("BookManagement.btnUpdateBook.text"));
        btnCreateBook.setText(resourceBundle.getString("BookManagement.btnCreateBook.text"));
        radSearchPublisher.setText(resourceBundle.getString("BookManagement.radSearchPublisher.text"));
        lblPrice.setText(resourceBundle.getString("BookManagement.lblPrice.text"));
        lblPublisher.setText(resourceBundle.getString("BookManagement.lblPublisher.text"));
        lblAuthor.setText(resourceBundle.getString("BookManagement.lblAuthor.text"));
        lblBookTitle.setText(resourceBundle.getString("BookManagement.lblBookTitle.text"));
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCleanAll;
    private javax.swing.JButton btnCreateBook;
    private javax.swing.JButton btnDeleteBook;
    private javax.swing.JButton btnListAllBooks;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateBook;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblBookId;
    private javax.swing.JLabel lblBookTitle;
    private javax.swing.JLabel lblCoverPhotoPlaceholder;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPublisher;
    private javax.swing.JPanel pnlDetailInformation;
    private javax.swing.ButtonGroup radGroupSearch;
    private javax.swing.JRadioButton radSearchAuthor;
    private javax.swing.JRadioButton radSearchBookId;
    private javax.swing.JRadioButton radSearchPublisher;
    private javax.swing.JRadioButton radSearchTitle;
    private javax.swing.JTable tblBookTable;
    private javax.swing.JTextArea txaAuthor;
    private javax.swing.JTextArea txaTitle;
    private javax.swing.JTextField txtBookId;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtSearcInput;
    // End of variables declaration//GEN-END:variables
}
