/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.softech.bookstoremanagement.gui;

import com.softech.bookstoremanagement.database.dao.BooksDao;
import com.softech.bookstoremanagement.database.dao.ReceiptsDao;
import com.softech.bookstoremanagement.database.dao.UsersDao;
import com.softech.bookstoremanagement.database.models.Books;
import com.softech.bookstoremanagement.database.models.ReceiptItems;
import com.softech.bookstoremanagement.database.models.Receipts;
import com.softech.bookstoremanagement.database.models.Users;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.builder.fluent.Configurations;
import org.apache.commons.configuration2.ex.ConfigurationException;

/**
 *
 * @author HP
 */
public class ListReceipts extends javax.swing.JPanel {

    private String receiptIdGlobal;
//    private String statusGlobal;
    private List<Receipts> receipts = new ArrayList<>();
    private DefaultTableModel model;
    private int selectedRow = 0;
    
    /*
    Application language settings
    */
    private String bundlePath = "com.softech.bookstoremanagement.gui.Bundle";
    private String languageConfigFilePath = "language.properties";

    /**
     * Creates new form ListReceipts
     */
    public ListReceipts() {
        initComponents();

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        tblListAllReceipts.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);

        tblListAllReceipts.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        tblListAllReceipts.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        tblListAllReceipts.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        
        listAllReceipts();
        
        this.setLanguage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDetail = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblListAllReceipts = new javax.swing.JTable();
        btnCancelReceipt = new javax.swing.JButton();
        btnListAllReceipts = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setPreferredSize(new java.awt.Dimension(1000, 490));

        btnDetail.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-bill-18.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/softech/bookstoremanagement/gui/Bundle"); // NOI18N
        btnDetail.setText(bundle.getString("ListReceipts.btnDetail.text")); // NOI18N
        btnDetail.setPreferredSize(new java.awt.Dimension(130, 27));
        btnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailActionPerformed(evt);
            }
        });

        tblListAllReceipts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Time", "Cashier", "Total", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListAllReceipts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListAllReceiptsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblListAllReceipts);
        if (tblListAllReceipts.getColumnModel().getColumnCount() > 0) {
            tblListAllReceipts.getColumnModel().getColumn(0).setMinWidth(400);
            tblListAllReceipts.getColumnModel().getColumn(0).setPreferredWidth(400);
            tblListAllReceipts.getColumnModel().getColumn(0).setMaxWidth(400);
        }

        btnCancelReceipt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancelReceipt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-delete-bin-18.png"))); // NOI18N
        btnCancelReceipt.setText(bundle.getString("ListReceipts.btnCancelReceipt.text")); // NOI18N
        btnCancelReceipt.setPreferredSize(new java.awt.Dimension(130, 27));
        btnCancelReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelReceiptActionPerformed(evt);
            }
        });

        btnListAllReceipts.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnListAllReceipts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/softech/bookstoremanagement/icons/icons8-to-do-list-18.png"))); // NOI18N
        btnListAllReceipts.setText(bundle.getString("ListReceipts.btnListAllReceipts.text")); // NOI18N
        btnListAllReceipts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllReceiptsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancelReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(btnDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(422, 422, 422)
                .addComponent(btnListAllReceipts)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnListAllReceipts, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reloadListReceipts() {
        DefaultTableModel tableModel = (DefaultTableModel) tblListAllReceipts.getModel();
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }

        ReceiptsDao receiptsDao = new ReceiptsDao();
        try {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            receipts = receiptsDao.searchAllReceipts();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (IOException ex) {
            ex.printStackTrace();
//            Logger.getLogger(ListReceipts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            ex.printStackTrace();
//            Logger.getLogger(ListReceipts.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (receipts.size() > 0) {
            for (int i = 0; i < receipts.size(); i++) {
                Users user = new Users();
                UsersDao usersDao = new UsersDao();
                try {
                    user = usersDao.searchByUserId(receipts.get(i).getUserId());
                } catch (IOException ex) {
                    ex.printStackTrace();
//                    Logger.getLogger(ListReceipts.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
//                    Logger.getLogger(ListReceipts.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
                tableModel.addRow(new Object[]{receipts.get(i).getReceiptId(), receipts.get(i).getCreatedOn(), receipts.get(i).getUserId() + " - " + user.getFirstName() + " " + user.getLastName(), receipts.get(i).getTotalPrice(), receipts.get(i).getStatus()});
            }
        }
    }

    private void listAllReceipts() {
        ReceiptsDao receiptDao = new ReceiptsDao();
        try {
            DefaultTableModel tableModel = (DefaultTableModel) tblListAllReceipts.getModel();
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            receipts = receiptDao.searchAllReceipts();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

            if (receipts.size() > 0) {
                for (Receipts receipt : receipts) {
                    String userId = receipt.getUserId();

                    UsersDao userDao = new UsersDao();
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    Users user = userDao.searchByUserId(userId);
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

                    tableModel.addRow(new Object[]{receipt.getReceiptId(), receipt.getCreatedOn(), user.getUserId() + " - " + user.getFirstName() + " " + user.getLastName(), receipt.getTotalPrice(), receipt.getStatus()});
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Such Item Can Be Found", "Search Results", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void btnListAllReceiptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllReceiptsActionPerformed
        // TODO add your handling code here:
        listAllReceipts();

    }//GEN-LAST:event_btnListAllReceiptsActionPerformed

    private void btnCancelReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelReceiptActionPerformed
        // TODO add your handling code here:
        int confirmCancel = JOptionPane.showConfirmDialog(this, "Are you sure to cancel this receipt?", "Cancel Receipt Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (confirmCancel == JOptionPane.YES_OPTION) {
            ReceiptsDao receiptsDao = new ReceiptsDao();

            try {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                receiptsDao.cancelReceiptStatus(receiptIdGlobal);
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(this, "Cancel Receipt Successfully", "Cancel Receipt", JOptionPane.INFORMATION_MESSAGE);
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                reloadListReceipts();
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            } catch (IOException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            } catch (SQLException ex) {
//            Logger.getLogger(CashierGenerateReceipt.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }

        } else {
            return;
        }
    }//GEN-LAST:event_btnCancelReceiptActionPerformed

    private void tblListAllReceiptsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListAllReceiptsMouseClicked
        // TODO add your handling code here:
        int columnReceiptId = 0;
        int columnStatus = 4;
        int row = tblListAllReceipts.getSelectedRow();
        selectedRow = row;

        receiptIdGlobal = tblListAllReceipts.getModel().getValueAt(row, columnReceiptId).toString();
//        String status = tblListAllReceipts.getModel().getValueAt(row, columnStatus).toString();
    }//GEN-LAST:event_tblListAllReceiptsMouseClicked


    private void btnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailActionPerformed

        int row = tblListAllReceipts.getSelectedRow();
        String receiptId = tblListAllReceipts.getModel().getValueAt(row, 0).toString();
        DetailReceipt detailReceipt = new DetailReceipt(receiptId);
        detailReceipt.setVisible(true);

    }//GEN-LAST:event_btnDetailActionPerformed

    public void setLanguage() {
        Locale locale;
        String language = "";
        Configurations languageConfigs = new Configurations();
        
        try {
            Configuration languageConfig = languageConfigs.properties(new File(languageConfigFilePath));
            language = languageConfig.getString("language");
        } catch (ConfigurationException ex) {
//            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        if (language.equals("vi")) {
            locale = new Locale("vi", "VN");
        } else {
            locale = Locale.getDefault();
        }
        
        ResourceBundle resourceBundle = ResourceBundle.getBundle(bundlePath, locale);

        btnCancelReceipt.setText(resourceBundle.getString("ListReceipts.btnCancelReceipt.text"));
        btnDetail.setText(resourceBundle.getString("ListReceipts.btnDetail.text"));
        btnListAllReceipts.setText(resourceBundle.getString("ListReceipts.btnListAllReceipts.text"));        
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelReceipt;
    private javax.swing.JButton btnDetail;
    private javax.swing.JButton btnListAllReceipts;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblListAllReceipts;
    // End of variables declaration//GEN-END:variables
}
